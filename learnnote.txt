git

PowerShell ctrl+s 搜索指令快捷键

linux 安装git指令 sudo apt-get install git
配置用户名和邮箱
    git config --global user.name "Your Name"
    git config --global user.email "email@example.com"
    
初始化版本库(repository) git init
查看状态 git status
查看记录 git log [--graph] [--pretty=oneline] [--abbrev-commit]
                 |显示图像 |仅显示1行         |显示短版本号
查看操作记录 git reflog
查看stage与最新版本区别 git diff
查看工作区与最新版本区别 git diff HEAD -- <file>

添加文件到暂存区(stage) git add <file>
将暂存区修改提交到当前分支 git commit -m <message>

撤销暂存区修改 git reset HEAD <file>
撤销工作区修改 git checkout -- <file>
回退版本 git reset [--hard] <commit id>
    
    commit id:
        HEAD 表示当前版本
        HEAD^, HEAD^^,... 表示上一个，上两个……版本
        HEAD~20 表示上20个版本


远程仓库

创建ssh密钥 ssh-keygen -t rsa -C <email>
在github添加ssh key 将公钥 id_rsa.pub 复制到github设置中
添加远程库：
    github上新建repository
    git remote add <remote> git@github.com:<githubid>/<reponame>
           远程库名(通常默认为origin）
推送本地库到远程库 git push [-u] <remote> [branchname]
    [-u]参数推送分支所有内容，将本地分支和远程分支关联，之后可以简化推送和拉取
获取远程库克隆 git clone git@github.com:<githubid>/<reponame>
查看远程库信息 git remote [-v]
    [-v]参数显示可抓取和推送的地址
推送分支：将该分支上所有本地提交推送到远程库
    git push [<remote>] [<branchname>]
抓取分支: 
    获取远程库克隆默认只复制master分支
    创建远程<remote>的分支到本地 git checkout -b <branchname> <remote>/<branchname>
    提交冲突导致推送失败时可以抓取分支并在本地合并解决冲突后推送
    建立本地分支与远程分支链接  git branch --set-upstream <branchname> <remote>/<branchname>
    抓取分支 git pull [<remote>] [<branchname>]
    
    
分支操作

查看分支 git branch
创建分支 git branch <branchname>
删除分支 git branch -d <branchname>
强行删除分支 git branch -D <branchname>  (用于删除未合并的分支)
改变当前分支 git checkout <branchname>
创建并改变当前分支 git checkout -b <branchname>
合并分支 git merge [--no-ff] [-m <message>] <branchname>
                   |禁用fast_forward模式
    fast_forward模式会将当前分支直接移到合并的分支，删除该分支后会失去该分支信息，
    禁用后则会保留分支，在merge时生成一个新的commit
分支合并冲突时，修改后重新提交可以解决冲突
分支管理策略：主分支master用于版本发布，在dev分支上工作，合作者各自建立自己的分支。

储藏当前工作 git stash
查看stash  git stash list
从stash恢复 git stash apply [stash@{<id>}]
                            |从指定id恢复（否则从最顶端0恢复）
删除stash内容 git stash drop [stash@{<id>}]
    注意：Windows PowerShell中 { }符号需要转义，分别写为`{ `}
清空stash内容 git stash clear
弹出stash内容 git stash pop
    等价于 git stash apply
           git stash drop

多人协作的工作模式通常是这样：
    1.首先，可以试图用git push推送自己的修改；
    2.如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；
    3.如果合并有冲突，则解决冲突，并在本地提交；
    4.没有冲突或者解决掉冲突后，再用git push推送就能成功！
    5.如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream branch-name origin/branch-name。

    
标签管理
    标签(tag)是版本库的快照，实际就是指向某个commit的指针

对当前分支创建标签 git tag <tagname>
对历史commit创建标签 git tag <tagname> <commitid>
创建带说明标签 git tag -a <tagname> -m <message> [<commitid>]
用私钥签名(PGP)标签 git tag -s <tagname> -m <message> [<commitid>]
    需要GnuPG，PGP签名的标签无法伪造
查看标签 git tag 
查看标签说明 git show <tagname>
删除标签 git tag -d <tagname>
推送标签到远程 git push <remote> <tagname>
一次性推送所有未推送标签 git push <remote> --tags
远程删除标签：先本地删除，然后 git push <remote> :refs/tags/<tagname>

github
1.点击 fork 在自己账号下克隆一个仓库，对自己的仓库才用读写权限
2.从自己账号下clone仓库到本地
3.本地修改后push到远程仓库
4.发起pull request


其他git配置

.gitignore
    该文件中的文件名会被git忽略。
    https://github.com/github/gitignore
    
    文件名<file>在.gitignore中无法add时：
    1.参数-f可以强制添加文件到git
        git add -f <file>
    2.检查.gitignore规则是否正确
        git check-ignore -v <file>
 
配置指令别名
    git config [--global] alias.<alias> <command>
               |对当前用户生效（没有则对当前仓库生效）
        将<alias>设为<command>的别名
        例：
        git config --global alias.co checkout
        git config --global alias.ct commit
        git config --global alias.br branch
        git config --global alias.unstage 'reset HEAD'
        git config --global alias.last 'log -1'
        git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"

    仓库的配置文件在.git/config中
    用户的配置文件在用户主目录下的.gitconfig中

搭建git服务器(linux)
    http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137583770360579bc4b458f044ce7afed3df579123eca000
    